<h1>About</h1>
<p>2024 協同專案倉儲與網站</p>
<h2>Git</h2>
<p>具 GUI (Graphics User Interface, 使用者圖形介面) 的 Git 工具: <a href="http://229.cycu.org/SourceTree_portable.7z">SourceTree_portable.7z</a></p>
<p style="padding-left: 30px;">請將 SourceTree 解開壓縮之後, 將 SourceTree 目錄放入 y:\, 然候在命令提示字元視窗, 以 Y:\SourceTree\app-3.4.12\sourcetree 啟動 (若直接以滑鼠開啟, 之後的設定檔案將會存入 Windows 操作系統中), 完成的設定將存入 Y:\home_ipv6\AppData\Roaming\Atlassian, 之後重新開啟後無需重新設定.</p>
<p style="padding-left: 30px;">若之後需要重新設定可攜系統中的 SourceTree, 只需要刪除 Y:\home_ipv6\AppData\Roaming\Atlassian 目錄後, 重新以 Y:\SourceTree\app-3.4.12\sourcetree 啟動後, 進行新的設定.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/4lxvVj7wlZw?si=1i1ZQ4Za7FtsE3N6" title="YouTube video player" width="560"></iframe></p>
<p>Many people learn about Git when they are asked to make changes to an existing repository. While Git is not hard to learn, for many beginners it requires a bit of practice to understand the underlying concepts.</p>
<p>許多人在被要求對現有 Git 倉儲進行修改時，才開始學習 Git。雖然 Git 不難學，但對於許多初學者而言，理解其背後的概念需要一些練習。</p>
<p><a href="https://gist.github.com/vdespa/975302dec670736df2299792cebbe8cb">Note for Intro Git for Gitlab</a> (<a href="https://gist.github.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b#file-intro-to-git-for-gitlab-md">中文翻譯</a>)</p>
<h2>STL</h2>
<p>STL 零件格式介紹</p>
<h3>STL_tools</h3>
<p>能夠用來處理 STL 零件檔案的工具介紹</p>
<h1>Solvespace</h1>
<p>Solvespace 介紹與編譯</p>
<h2>Solv_parts</h2>
<p>Solvespace 零件繪圖導引</p>
<h2>Solv_assembly</h2>
<p>Solvespace 組立導引</p>
<h1>NX2312</h1>
<p>NX2312 介紹</p>
<h2>NX_parts</h2>
<p>NX2312 零件繪圖導引</p>
<h2>NX_assembly</h2>
<p>NX2312 組立導引</p>
<h1>CoppeliaSim</h1>
<p><img alt="" height="537" src="/images/pinball_flipper_design.png" width="400"/></p>
<p>(<a href="https://www.pinrepair.com/em/index1.htm">source</a>)</p>
<p>Pinball 遊戲台上各種裝置的正式英文名稱:</p>
<p>Playfield (遊戲場)</p>
<p style="padding-left: 30px;">整個遊戲台的主要活動區域.</p>
<p>Spinner (旋轉器)</p>
<p style="padding-left: 30px;">可以旋轉的特殊目標, 球經過時會旋轉並加分.</p>
<p>Ball drain (球洞)</p>
<p style="padding-left: 30px;">球掉落遊戲台底部的區域, 通常意味著失去一顆球.</p>
<p>Score display (得分顯示)</p>
<p style="padding-left: 30px;">顯示當前分數的電子螢幕.</p>
<p>Multiball (多球模式)</p>
<p style="padding-left: 30px;">同時在遊戲台上有多顆球的遊戲狀態.</p>
<p>Kickback (反彈)</p>
<p>可以將即將掉落的球彈回遊戲台的機制.</p>
<p>Flippers (控制撥桿)</p>
<p style="padding-left: 30px;">位於遊戲台底部的兩個可以控制的撥桿, 用於擊球和控制球的方向.</p>
<p>Bumpers (跳珠器)</p>
<p style="padding-left: 30px;">分佈在遊戲台上的圓形突起裝置, 當球碰到時會彈開球並加分.</p>
<p>Slingshots (彈射器)</p>
<p style="padding-left: 30px;">位於flipper兩側的斜面彈射裝置, 當球觸碰時會快速彈開球.</p>
<p>Targets (目標)</p>
<p style="padding-left: 30px;">遊戲台上的固定打擊目標, 可分為: Drop targets (下降目標), Pop-up targets (彈出目標), Standing targets (靜態目標) 等.</p>
<p>Lanes (軌道)</p>
<p style="padding-left: 30px;">遊戲台上的特定路徑, 如：Roll-over lanes, Return lanes 等.</p>
<p>Ramps (斜坡)</p>
<p style="padding-left: 30px;">遊戲台上的傾斜軌道, 球可以滾過並加分.</p>
<p>Outlanes (外側軌道)</p>
<p style="padding-left: 30px;">位於flipper兩側的軌道, 通常會導致球掉落.</p>
<p>Plunger (發射器)</p>
<p style="padding-left: 30px;">用於初始發射球的裝置.</p>
<hr/>
<p>References:</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Pinball">https://en.wikipedia.org/wiki/Pinball</a></p>
<p style="padding-left: 30px;"><a href="https://cdn.aaai.org/ocs/1191/1191-5911-1-PB.pdf">https://cdn.aaai.org/ocs/1191/1191-5911-1-PB.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.researchgate.net/publication/360722315_Toward_a_Study_of_Pinball">https://www.researchgate.net/publication/360722315_Toward_a_Study_of_Pinball</a></p>
<p style="padding-left: 30px;"><a href="https://www.clevelandsoftwaredesign.com/pinball-parts">https://www.clevelandsoftwaredesign.com/pinball-parts</a></p>
<p style="padding-left: 30px;"><a href="https://www.kineticist.com/post/a-beginners-guide-to-pinball-designers">https://www.kineticist.com/post/a-beginners-guide-to-pinball-designers</a></p>
<p style="padding-left: 30px;"><a href="https://technologystudent.com/pdf22/pinball-full1B.pdf">https://technologystudent.com/pdf22/pinball-full1B.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.sciencedirect.com/science/article/pii/S1474667017307358">https://www.sciencedirect.com/science/article/pii/S1474667017307358</a></p><h2>Cop_pinball</h2>
<p>CoppeliaSim 彈珠檯場景零件與組立</p>
<h2>Cop_zmq</h2>
<p>CoppeliaSim 彈珠檯 zmq 控制程式</p>
<p></p>
<h1>Webots</h1>
<p><img alt="" height="537" src="/images/pinball_flipper_design.png" width="400"/></p>
<p>(<a href="https://www.pinrepair.com/em/index1.htm">source</a>)</p>
<p>Pinball 遊戲台上各種裝置的正式英文名稱:</p>
<p>Playfield (遊戲場)</p>
<p style="padding-left: 30px;">整個遊戲台的主要活動區域.</p>
<p>Spinner (旋轉器)</p>
<p style="padding-left: 30px;">可以旋轉的特殊目標, 球經過時會旋轉並加分.</p>
<p>Ball drain (球洞)</p>
<p style="padding-left: 30px;">球掉落遊戲台底部的區域, 通常意味著失去一顆球.</p>
<p>Score display (得分顯示)</p>
<p style="padding-left: 30px;">顯示當前分數的電子螢幕.</p>
<p>Multiball (多球模式)</p>
<p style="padding-left: 30px;">同時在遊戲台上有多顆球的遊戲狀態.</p>
<p>Kickback (反彈)</p>
<p>可以將即將掉落的球彈回遊戲台的機制.</p>
<p>Flippers (控制撥桿)</p>
<p style="padding-left: 30px;">位於遊戲台底部的兩個可以控制的撥桿, 用於擊球和控制球的方向.</p>
<p>Bumpers (跳珠器)</p>
<p style="padding-left: 30px;">分佈在遊戲台上的圓形突起裝置, 當球碰到時會彈開球並加分.</p>
<p>Slingshots (彈射器)</p>
<p style="padding-left: 30px;">位於flipper兩側的斜面彈射裝置, 當球觸碰時會快速彈開球.</p>
<p>Targets (目標)</p>
<p style="padding-left: 30px;">遊戲台上的固定打擊目標, 可分為: Drop targets (下降目標), Pop-up targets (彈出目標), Standing targets (靜態目標) 等.</p>
<p>Lanes (軌道)</p>
<p style="padding-left: 30px;">遊戲台上的特定路徑, 如：Roll-over lanes, Return lanes 等.</p>
<p>Ramps (斜坡)</p>
<p style="padding-left: 30px;">遊戲台上的傾斜軌道, 球可以滾過並加分.</p>
<p>Outlanes (外側軌道)</p>
<p style="padding-left: 30px;">位於flipper兩側的軌道, 通常會導致球掉落.</p>
<p>Plunger (發射器)</p>
<p style="padding-left: 30px;">用於初始發射球的裝置.</p>
<hr/>
<p>References:</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Pinball">https://en.wikipedia.org/wiki/Pinball</a></p>
<p style="padding-left: 30px;"><a href="https://cdn.aaai.org/ocs/1191/1191-5911-1-PB.pdf">https://cdn.aaai.org/ocs/1191/1191-5911-1-PB.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.researchgate.net/publication/360722315_Toward_a_Study_of_Pinball">https://www.researchgate.net/publication/360722315_Toward_a_Study_of_Pinball</a></p>
<p style="padding-left: 30px;"><a href="https://www.clevelandsoftwaredesign.com/pinball-parts">https://www.clevelandsoftwaredesign.com/pinball-parts</a></p>
<p style="padding-left: 30px;"><a href="https://www.kineticist.com/post/a-beginners-guide-to-pinball-designers">https://www.kineticist.com/post/a-beginners-guide-to-pinball-designers</a></p>
<p style="padding-left: 30px;"><a href="https://technologystudent.com/pdf22/pinball-full1B.pdf">https://technologystudent.com/pdf22/pinball-full1B.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.sciencedirect.com/science/article/pii/S1474667017307358">https://www.sciencedirect.com/science/article/pii/S1474667017307358</a></p><h2>We_pinball</h2>
<p>Webots 彈珠檯場景零件與組立</p>
<h2>We_python</h2>
<p>Webots 彈珠檯 Python 控制程式</p>
<h1>Programs</h1>
<h2>Python</h2>
<h3>Py_slvs</h3>
<p>可以與 Python 結合使用的 Solvespace 程式庫</p>
<h3>Py_NX</h3>
<p>可以與 NX2312 結合使用的 Python 程式應用</p>
<h3>Py_copsim</h3>
<p>可以與 CoppeliaSim 結合使用的 Python 程式應用</p>
<h3>Brython</h3>
<p>可以在網際前端編寫 Python 並設法與後端伺服器結合使用的 Brython 程式應用</p>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/><h2>C</h2>
<p>可以與 Webots 結合使用的 C/C++ 程式應用</p>
<p><span>可用來編譯 Solvespace v3.1 版原始碼與 Webots 場景物件的可攜套件 <a href="http://229.cycu.org/python_2025_lite_w_msys_cmake_solvespace.7z">python_2025_lite_w_msys_cmake_solvespace.7z</a> (Download 1.96GB, After extracted 3.7GB)</span></p>
<h3>Arduino</h3>
<p><a href="https://www.arduino.cc/">https://www.arduino.cc/</a></p>
<p>利用 Arduino 控制卡上的 C 程式結合電子硬體, 用來與伺服器上的 Python 程式與 CoppeliaSim (Webots) 平台上的場景物件進行互動</p>
<h1>MISC</h1>
<p>其他相關資料</p>
<p></p>
<p></p>